@page "/grades"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@inject Pusula.UI.Services.ApiClient Api
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JS
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components

<h3>Grades</h3>

@if (isTeacher)
{
	<div class="card mb-3">
		<div class="card-header d-flex justify-content-between align-items-center" style="cursor: pointer;" @onclick="ToggleAddGradeForm">
			<h5 class="mb-0">Add New Grade</h5>
			<i class="fas fa-chevron-@(showAddGradeForm ? "up" : "down")"></i>
		</div>
		@if (showAddGradeForm)
		{
			<div class="card-body">
				<EditForm Model="newGrade" OnValidSubmit="AddGrade" FormName="addGradeForm">
					<DataAnnotationsValidator />
					<div class="row">
						<div class="col-md-6 mb-3">
							<label for="courseSelect" class="form-label">Course</label>
							<InputSelect id="courseSelect" @bind-Value="selectedCourseId" @bind-Value:after="OnCourseChanged" class="form-control" TValue="string">
								<option value="">Select a course...</option>
								@if (teacherCourses != null)
								{
									@foreach (var course in teacherCourses)
									{
										<option value="@course.Id">@course.Name</option>
									}
								}
							</InputSelect>
							<ValidationMessage For="@(() => newGrade.CourseId)" />
						</div>
						<div class="col-md-6 mb-3">
							<label for="studentSelect" class="form-label">Student</label>
							<InputSelect id="studentSelect" @bind-Value="newGrade.StudentId" class="form-control" disabled="@isLoadingCourseStudents">
								<option value="">@(isLoadingCourseStudents ? "Loading students..." : "Select a student...")</option>
								@if (courseStudents != null && courseStudents.Any())
								{
									@foreach (var student in courseStudents)
									{
										<option value="@student.Id">@student.FullName</option>
									}
								}
								else if (!isLoadingCourseStudents && !string.IsNullOrEmpty(selectedCourseId))
								{
									<option value="" disabled>No students enrolled in this course</option>
								}
							</InputSelect>
							<ValidationMessage For="@(() => newGrade.StudentId)" />
							@if (isLoadingCourseStudents)
							{
								<small class="text-muted">Loading students...</small>
							}
							else if (courseStudents != null)
							{
								<small class="text-muted">Enrolled students: @courseStudents.Count</small>
							}
							else if (!string.IsNullOrEmpty(selectedCourseId))
							{
								<small class="text-muted">No students enrolled in this course</small>
							}
						</div>
					</div>
					<div class="row">
						<div class="col-md-6 mb-3">
							<label for="gradeValue" class="form-label">Grade</label>
							<InputNumber id="gradeValue" @bind-Value="newGrade.Value" class="form-control" step="0.01" min="0" max="100" placeholder="Enter grade (0-100)" />
							<ValidationMessage For="@(() => newGrade.Value)" />
						</div>
					</div>
					<div class="d-flex gap-2">
						<button type="submit" class="btn btn-primary" disabled="@isAddingGrade">
							@if (isAddingGrade)
							{
								<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
							}
							Add Grade
						</button>
						<button type="button" class="btn btn-secondary" @onclick="CancelAddGrade">Cancel</button>
					</div>
				</EditForm>
			</div>
		}
	</div>
}

@if (isStudent)
{
	@if (currentStudent != null)
	{
		<div class="alert alert-info">
			<h5>My Grades</h5>
			<p class="mb-0">Showing grades for: <strong>@currentStudent.FullName</strong></p>
		</div>
	}
}
else
{
	<EditForm Model="query" OnValidSubmit="Load" FormName="gradesForm">
		<div class="mb-2">
			<label>Student</label>
			<InputSelect @bind-Value="query.StudentId" class="form-control">
				<option value="">Select a student...</option>
				@if (students != null)
				{
					@foreach (var student in students)
					{
						<option value="@student.Id">@student.FullName</option>
					}
				}
			</InputSelect>
		</div>
		<button class="btn btn-secondary" type="submit">Load</button>
	</EditForm>
}

@if (grades == null) 
{ 
	@if (isStudent)
	{
		<p>Loading your grades...</p>
	}
	else
	{
		<p>Select a student and click Load.</p>
	}
}
else
{
	<table class="table">
		<thead><tr><th>Course</th><th>Grade</th><th>Date</th></tr></thead>
		<tbody>
			@foreach (var g in grades)
			{
				<tr><td>@GetCourseName(g.CourseId)</td><td>@g.Value</td><td>@g.GivenAt.ToShortDateString()</td></tr>
			}
		</tbody>
	</table>
}

@code {
	bool isLoadingCourseStudents = false;
	class GradeDto { public string Id { get; set; }=string.Empty; public string StudentId { get; set; }=string.Empty; public string CourseId { get; set; }=string.Empty; public decimal Value { get; set; } public DateTime GivenAt { get; set; } }
	class StudentDto { public string Id { get; set; }=string.Empty; public string UserId { get; set; }=string.Empty; public string Email { get; set; }=string.Empty; public string FullName { get; set; }=string.Empty; public DateTime EnrollmentDate { get; set; } }
	class CourseDto { public string Id { get; set; }=string.Empty; public string Name { get; set; }=string.Empty; public string? Description { get; set; } public int Status { get; set; } public string TeacherId { get; set; }=string.Empty; public string TeacherName { get; set; }=string.Empty; }
	class Query { public string StudentId { get; set; } = string.Empty; }
	class AddGradeRequest 
	{ 
		[Required(ErrorMessage = "Please select a course")]
		public string CourseId { get; set; }=string.Empty; 
		
		[Required(ErrorMessage = "Please select a student")]
		public string StudentId { get; set; }=string.Empty; 
		
		[Required(ErrorMessage = "Grade is required")]
		[Range(0, 100, ErrorMessage = "Grade must be between 0 and 100")]
		public decimal Value { get; set; } 
	}
	
	Query query = new();
	AddGradeRequest newGrade = new();
	List<GradeDto>? grades;
	List<StudentDto>? students;
	List<CourseDto>? courses;
	List<CourseDto>? teacherCourses;
	List<StudentDto>? courseStudents;
	Dictionary<string, string> courseNames = new();
	bool isTeacher = false;
	bool isStudent = false;
	bool isAddingGrade = false;
	bool showAddGradeForm = false;
	string selectedCourseId = string.Empty;
	StudentDto? currentStudent = null;
	
	protected override async Task OnInitializedAsync()
	{
		// Check user roles
		var authState = await AuthStateProvider.GetAuthenticationStateAsync();
		isTeacher = authState.User.IsInRole("Teacher");
		isStudent = authState.User.IsInRole("Student");
		
		// Load data
		students = await Api.GetAsync<List<StudentDto>>("api/students");
		courses = await Api.GetAsync<List<CourseDto>>("api/courses");
		courseNames = courses?.ToDictionary(c => c.Id, c => c.Name) ?? new Dictionary<string, string>();
		
		// Load teacher courses if user is teacher
		if (isTeacher)
		{
			teacherCourses = await Api.GetAsync<List<CourseDto>>("api/teachers/my-courses");
		}
		
		// Load current student info and their grades if user is student
		if (isStudent)
		{
			currentStudent = await Api.GetAsync<StudentDto>("api/students/me");
			if (currentStudent != null)
			{
				grades = await Api.GetAsync<List<GradeDto>>($"api/grades/by-student/{currentStudent.Id}");
			}
		}
	}
	
	async Task Load()
	{
		if (!string.IsNullOrWhiteSpace(query.StudentId))
			grades = await Api.GetAsync<List<GradeDto>>($"api/grades/by-student/{query.StudentId}");
	}
	
	async Task OnCourseChanged()
	{
		newGrade.CourseId = selectedCourseId;
		
		if (!string.IsNullOrEmpty(selectedCourseId))
		{
			isLoadingCourseStudents = true;
			courseStudents = null; // Clear previous results
			newGrade.StudentId = string.Empty; // Reset student selection
			
			try
			{
				Console.WriteLine($"Loading students for course ID: {selectedCourseId}");
				
				// Validate GUID format
				if (!Guid.TryParse(selectedCourseId, out var courseGuid))
				{
					Console.WriteLine($"Invalid GUID format: {selectedCourseId}");
					courseStudents = new List<StudentDto>();
					return;
				}
				
				courseStudents = await Api.GetAsync<List<StudentDto>>($"api/teachers/my-courses/{selectedCourseId}/students");
				Console.WriteLine($"API returned {courseStudents?.Count ?? 0} students");
				
				// Only show course students, no fallback to all students
				if (courseStudents == null)
				{
					courseStudents = new List<StudentDto>();
				}
			}
			catch (Exception ex)
			{
				Console.WriteLine($"Error loading course students: {ex.Message}");
				courseStudents = new List<StudentDto>(); // Show empty list if there's an error
			}
			finally
			{
				isLoadingCourseStudents = false;
			}
		}
		else
		{
			courseStudents = null;
			newGrade.StudentId = string.Empty; // Reset student selection
		}
	}
	
	async Task AddGrade()
	{
		if (isAddingGrade) return;
		
		isAddingGrade = true;
		try
		{
			Console.WriteLine($"Adding grade: CourseId={newGrade.CourseId}, StudentId={newGrade.StudentId}, Value={newGrade.Value}");
			
			var response = await Api.PostAsync("api/grades", newGrade);
			
			if (response.IsSuccessStatusCode)
			{
				// Reset form and close
				newGrade = new AddGradeRequest();
				selectedCourseId = string.Empty;
				showAddGradeForm = false;
				courseStudents = null;
				await JS.InvokeVoidAsync("alert", "Grade added successfully!");
			}
			else
			{
				var errorContent = await response.Content.ReadAsStringAsync();
				await JS.InvokeVoidAsync("alert", $"Error adding grade: {response.StatusCode} - {errorContent}");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error adding grade: {ex.Message}");
			await JS.InvokeVoidAsync("alert", $"Error adding grade: {ex.Message}");
		}
		finally
		{
			isAddingGrade = false;
		}
	}
	
	void CancelAddGrade()
	{
		newGrade = new AddGradeRequest();
		selectedCourseId = string.Empty;
		showAddGradeForm = false;
		courseStudents = null;
	}
	
	void ToggleAddGradeForm()
	{
		showAddGradeForm = !showAddGradeForm;
		if (!showAddGradeForm)
		{
			// Reset form when closing
			newGrade = new AddGradeRequest();
			selectedCourseId = string.Empty;
			courseStudents = null;
		}
	}
	
	string GetCourseName(string courseId)
	{
		return courseNames.TryGetValue(courseId, out var name) ? name : courseId;
	}
}


