@page "/grades"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@inject Pusula.UI.Services.ApiClient Api

<h3>Grades</h3>

<EditForm Model="query" OnValidSubmit="Load" FormName="gradesForm">
	<div class="mb-2">
		<label>Student</label>
		<InputSelect @bind-Value="query.StudentId" class="form-control">
			<option value="">Select a student...</option>
			@if (students != null)
			{
				@foreach (var student in students)
				{
					<option value="@student.Id">@student.FullName</option>
				}
			}
		</InputSelect>
	</div>
	<button class="btn btn-secondary" type="submit">Load</button>
</EditForm>

@if (grades == null) { <p>Select a student and click Load.</p>; }
else
{
	<table class="table">
		<thead><tr><th>Course</th><th>Grade</th><th>Date</th></tr></thead>
		<tbody>
			@foreach (var g in grades)
			{
				<tr><td>@GetCourseName(g.CourseId)</td><td>@g.Value</td><td>@g.GivenAt.ToShortDateString()</td></tr>
			}
		</tbody>
	</table>
}

@code {
	class GradeDto { public string Id { get; set; }=string.Empty; public string StudentId { get; set; }=string.Empty; public string CourseId { get; set; }=string.Empty; public decimal Value { get; set; } public DateTime GivenAt { get; set; } }
	class StudentDto { public string Id { get; set; }=string.Empty; public string UserId { get; set; }=string.Empty; public string Email { get; set; }=string.Empty; public string FullName { get; set; }=string.Empty; public DateTime EnrollmentDate { get; set; } }
	class CourseDto { public string Id { get; set; }=string.Empty; public string Name { get; set; }=string.Empty; public string? Description { get; set; } public int Status { get; set; } public string TeacherId { get; set; }=string.Empty; public string TeacherName { get; set; }=string.Empty; }
	class Query { public string StudentId { get; set; } = string.Empty; }
	Query query = new();
	List<GradeDto>? grades;
	List<StudentDto>? students;
	List<CourseDto>? courses;
	Dictionary<string, string> courseNames = new();
	
	protected override async Task OnInitializedAsync()
	{
		students = await Api.GetAsync<List<StudentDto>>("api/students");
		courses = await Api.GetAsync<List<CourseDto>>("api/courses");
		courseNames = courses?.ToDictionary(c => c.Id, c => c.Name) ?? new Dictionary<string, string>();
	}
	
	async Task Load()
	{
		if (!string.IsNullOrWhiteSpace(query.StudentId))
			grades = await Api.GetAsync<List<GradeDto>>($"api/grades/by-student/{query.StudentId}");
	}
	
	string GetCourseName(string courseId)
	{
		return courseNames.TryGetValue(courseId, out var name) ? name : courseId;
	}
}


